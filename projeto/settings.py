"""
Django settings for projeto project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import environ
import os
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()

environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
LOCAL = False
DEBUG = False

# APPENGINE_URL = env("APPENGINE_URL", default=None)
# if APPENGINE_URL:
#     # Ensure a scheme is present in the URL before it's processed.
#     if not urlparse(APPENGINE_URL).scheme:
#         APPENGINE_URL = f"https://{APPENGINE_URL}"

#     ALLOWED_HOSTS = [urlparse(APPENGINE_URL).netloc]
#     CSRF_TRUSTED_ORIGINS = [APPENGINE_URL]
#     SECURE_SSL_REDIRECT = True
# else:
ALLOWED_HOSTS = ["*"]

# Redirecionamento
LOGOUT_REDIRECT_URL = LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'

INSTALLED_APPS = [
    'galeria',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'projeto.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'galeria.context_processors.categorias'
            ],
        },
    },
]

WSGI_APPLICATION = 'projeto.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    # sqlite
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
    # Conexão com a db no GCP
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'HOST': f'/cloudsql/{env("CONNECTION_NAME")}',  # Unix socket
    #     'NAME': env('DB_NAME'),
    #     'USER': env('DB_USER'),
    #     'PASSWORD': env('DB_PASSWORD'),
    #     'PORT': '',
    # }
}
# Para desenvolvimento local
# DATABASES['default']['HOST'] = 'localhost'
# DATABASES['default']['PORT'] = 5432


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Para desenvolvimento Local

# STATIC_URL = "static/"
# STATIC_ROOT = BASE_DIR / 'static'
# MEDIA_URL = "media/"
# MEDIA_ROOT = BASE_DIR / 'media'

BUCKET = env('GS_BUCKET_NAME')

STATIC_URL = f'https://storage.googleapis.com/{BUCKET}/static/'
MEDIA_URL = f'https://storage.googleapis.com/{BUCKET}/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# email de recuperação de senha
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

# django-storages
STORAGES = {
    'default': {
        'BACKEND': 'storages.backends.gcloud.GoogleCloudStorage',
        'OPTIONS': {
            'bucket_name': BUCKET,
            'project_id': env('GS_PROJECT_ID'),
            'default_acl': 'publicRead',
            'location': 'media/'
        }
    },
    'staticfiles': {
        'BACKEND': 'storages.backends.gcloud.GoogleCloudStorage',
        'OPTIONS': {
            'bucket_name': BUCKET,
            'project_id': env('GS_PROJECT_ID'),
            'default_acl': 'publicRead',
            'location': 'static/' 
        }
    }
}